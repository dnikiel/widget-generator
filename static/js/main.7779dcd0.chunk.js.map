{"version":3,"sources":["components/Configurator/Configurator.module.css","components/HotelSearch/HotelSearch.module.css","components/App/App.module.css","hooks/useAutocompleteApi.ts","hooks/useHotelApi.ts","components/Widget/Widget.tsx","components/Configurator/Configurator.tsx","components/ConfiguratorWrapper/ConfiguratorWrapper.tsx","components/HotelSearch/HotelSearch.tsx","components/HotelSearchWrapper/HotelSearchWrapper.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","handleResponse","response","ok","Error","statusText","json","useAutocompleteApi","useState","isLoaded","setLoaded","error","setError","hotels","setHotels","useEffect","fetch","then","data","useHotelApi","hotelId","hotel","setHotel","Widget","options","commonStyle","border","padding","className","styles","widget","style","showBgImage","backgroundImage","photo","backgroundSize","showName","color","fontColor","name","showAddress","address","Configurator","setOptions","handleChange","e","target","value","type","checked","container","section","title","id","onChange","htmlFor","inputs","inputContainer","htmlButtonContainer","onClick","tree","ReactDOMServer","renderToString","navigator","clipboard","writeText","console","log","err","ConfiguratorWrapper","message","HotelSearch","filteredHotels","setFilteredHotels","setValue","shouldRenderConfigurator","setShouldRenderConfigurator","shouldRenderHint","setShouldRenderHint","placeholder","filter","toUpperCase","search","length","list","map","item","key","find","handleClick","HotelSearchWrapper","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7779dcd0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Configurator_container__157NO\",\"options\":\"Configurator_options__3EwtT\",\"widget\":\"Configurator_widget__5FgTX\",\"section\":\"Configurator_section__3bupT\",\"title\":\"Configurator_title__2UU0s\",\"inputs\":\"Configurator_inputs__yD0v9\",\"inputContainer\":\"Configurator_inputContainer__atnUt\",\"htmlButtonContainer\":\"Configurator_htmlButtonContainer__1S8YL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"HotelSearch_list__2cqxT\",\"item\":\"HotelSearch_item__1k9wu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16xz_\"};","import { useState, useEffect } from \"react\";\nimport { AutocompleteHotels } from \"../types\";\n\nfunction handleResponse(response: any) {\n  if (!response.ok) throw Error(response.statusText);\n\n  return response.json();\n}\n\nfunction useAutocompleteApi() {\n  const [isLoaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [hotels, setHotels] = useState<AutocompleteHotels>([]);\n\n  useEffect(() => {\n    fetch(\n      \"http://my-json-server.typicode.com/radek-shake/react-endpoints/autocomplete\"\n    )\n      .then(handleResponse)\n      .then(\n        data => {\n          setLoaded(true);\n          setHotels(data);\n        },\n        error => {\n          setLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  return { isLoaded, error, hotels };\n}\n\nexport default useAutocompleteApi;\n","import { useState, useEffect } from \"react\";\nimport { Hotel } from \"../types\";\n\nfunction handleResponse(response: any) {\n  if (!response.ok) throw Error(response.statusText);\n\n  return response.json();\n}\n\nfunction useHotelApi(hotelId: number) {\n  const [isLoaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [hotel, setHotel] = useState<Hotel | null>(null);\n\n  useEffect(() => {\n    fetch(\n      `http://my-json-server.typicode.com/radek-shake/react-endpoints/hotels/${hotelId}`\n    )\n      .then(handleResponse)\n      .then(\n        data => {\n          setLoaded(true);\n          setHotel(data);\n        },\n        error => {\n          setLoaded(true);\n          setError(error);\n        }\n      );\n  }, [hotelId]);\n\n  return { isLoaded, error, hotel };\n}\n\nexport default useHotelApi;\n","import React from \"react\";\nimport styles from \"../Configurator/Configurator.module.css\";\nimport { Hotel, Options } from \"../../types\";\n\ntype Props = {\n  hotel: Hotel | null;\n  options: Options;\n};\n\nconst Widget = ({ hotel, options }: Props) => {\n  const commonStyle = {\n    border: \"1px solid #000000\",\n    padding: \"25px\"\n  };\n\n  return (\n    <div\n      className={styles.widget}\n      style={\n        options.showBgImage\n          ? {\n              ...commonStyle,\n              backgroundImage: `url(${hotel?.photo})`,\n              backgroundSize: \"cover\"\n            }\n          : commonStyle\n      }\n    >\n      {options.showName && (\n        <h2 style={{ color: options.fontColor === \"black\" ? \"#000\" : \"#fff\" }}>\n          {hotel?.name}\n        </h2>\n      )}\n      {options.showAddress && (\n        <h2 style={{ color: options.fontColor === \"black\" ? \"#000\" : \"#fff\" }}>\n          {hotel?.address}\n        </h2>\n      )}\n    </div>\n  );\n};\n\nexport default Widget;\n","import React, { useState } from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport Widget from \"../Widget\";\nimport { Hotel, Options } from \"../../types\";\nimport styles from \"./Configurator.module.css\";\n\ntype Props = {\n  hotel: Hotel | null;\n};\n\nconst Configurator = ({ hotel }: Props) => {\n  const [options, setOptions] = useState<Options>({\n    showName: true,\n    showBgImage: false,\n    showAddress: true,\n    fontColor: \"black\"\n  });\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n    const { target } = e;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n\n    setOptions({\n      ...options,\n      [name]: value\n    });\n  };\n\n  const handleCopyHtml = () => {\n    const tree = ReactDOMServer.renderToString(\n      <Widget options={options} hotel={hotel} />\n    );\n\n    navigator.clipboard.writeText(tree).then(\n      function() {\n        console.log(\"Copying to clipboard was successful!\");\n      },\n      function(err) {\n        console.error(\"Could not copy text: \", err);\n      }\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.options}>\n        <div className={styles.section}>\n          <div className={styles.title}>\n            <span>Name</span>\n            <span>\n              <input\n                type=\"checkbox\"\n                name=\"showName\"\n                id=\"showName\"\n                checked={options.showName}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"showName\">Enabled</label>\n            </span>\n          </div>\n          <div className={styles.inputs}>\n            <div className={styles.inputContainer}>\n              <input\n                type=\"radio\"\n                id=\"blackFont\"\n                name=\"fontColor\"\n                value=\"black\"\n                checked={options.fontColor === \"black\"}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"blackFont\">Black font</label>\n            </div>\n            <div className={styles.inputContainer}>\n              <input\n                type=\"radio\"\n                id=\"whiteFont\"\n                name=\"fontColor\"\n                value=\"white\"\n                checked={options.fontColor === \"white\"}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"whiteFont\">White font</label>\n            </div>\n          </div>\n        </div>\n        <div className={styles.section}>\n          <div className={styles.title}>\n            <span>Background image</span>\n            <span>\n              <input\n                type=\"checkbox\"\n                name=\"showBgImage\"\n                id=\"showBgImage\"\n                checked={options.showBgImage}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"showBgImage\">Enabled</label>\n            </span>\n          </div>\n        </div>\n        <div className={styles.section}>\n          <div className={styles.title}>\n            <span>Address</span>\n            <span>\n              <input\n                type=\"checkbox\"\n                name=\"showAddress\"\n                id=\"showAddress\"\n                checked={options.showAddress}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"showAddress\">Enabled</label>\n            </span>\n          </div>\n          <div className={styles.inputs}>\n            <div className={styles.inputContainer}>\n              <input\n                type=\"radio\"\n                id=\"city\"\n                name=\"format\"\n                value=\"city\"\n                onChange={handleChange}\n              />\n              <label htmlFor=\"city\">City</label>\n            </div>\n            <div className={styles.inputContainer}>\n              <input\n                type=\"radio\"\n                id=\"formatted\"\n                name=\"format\"\n                value=\"formatted\"\n                onChange={handleChange}\n              />\n              <label htmlFor=\"formatted\">Formatted</label>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Widget options={options} hotel={hotel} />\n      <div className={styles.htmlButtonContainer}>\n        <button onClick={handleCopyHtml}>Copy HTML code</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Configurator;\n","import React from \"react\";\nimport useHotelApi from \"../../hooks/useHotelApi\";\nimport Configurator from \"../Configurator\";\n\ntype Props = {\n  hotelId: number;\n};\n\nconst ConfiguratorWrapper = ({ hotelId }: Props) => {\n  const { hotel, error, isLoaded } = useHotelApi(hotelId);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return <Configurator hotel={hotel} />;\n  }\n};\n\nexport default ConfiguratorWrapper;\n","import React, { useState } from \"react\";\nimport styles from \"./HotelSearch.module.css\";\nimport ConfiguratorWrapper from \"../ConfiguratorWrapper\";\nimport { AutocompleteHotels, AutocompleteHotel } from \"../../types\";\n\ntype Props = {\n  hotels: AutocompleteHotels;\n};\n\nconst HotelSearch = ({ hotels }: Props) => {\n  const [filteredHotels, setFilteredHotels] = useState<AutocompleteHotels>([]);\n  const [value, setValue] = useState(\"\");\n  const [hotel, setHotel] = useState<AutocompleteHotel | null>(null);\n  const [shouldRenderConfigurator, setShouldRenderConfigurator] = useState(\n    false\n  );\n  const [shouldRenderHint, setShouldRenderHint] = useState(false);\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n    const { value } = e.target;\n    const filter = value.toUpperCase();\n\n    setValue(value);\n    setHotel(null);\n\n    if (filter) {\n      const filteredHotels = hotels.filter(\n        hotel => !hotel.name.toUpperCase().search(filter)\n      );\n\n      setFilteredHotels(filteredHotels);\n    } else {\n      setFilteredHotels([]);\n    }\n  };\n\n  const handleClick = (id: number) => {\n    const hotel = filteredHotels.find(hotel => hotel.id === id);\n\n    if (hotel) {\n      setHotel(hotel);\n      setValue(hotel.name);\n      setShouldRenderHint(false);\n    }\n  };\n\n  const handleClickNext = () => {\n    if (hotel) {\n      setShouldRenderConfigurator(true);\n    } else {\n      setShouldRenderHint(true);\n    }\n  };\n\n  if (shouldRenderConfigurator && hotel)\n    return <ConfiguratorWrapper hotelId={hotel.id} />;\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Hotel name (start typing)\"\n        onChange={handleChange}\n        value={value}\n      />\n      <button onClick={handleClickNext}>Next</button>\n      {shouldRenderHint && <div>Choose hotel from the list.</div>}\n      {!!filteredHotels.length && (\n        <div className={styles.list}>\n          {filteredHotels.map(({ name, id }) => (\n            <div\n              className={styles.item}\n              key={name}\n              onClick={() => handleClick(id)}\n            >\n              {name}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HotelSearch;\n","import React from \"react\";\nimport useAutocompleteApi from \"../../hooks/useAutocompleteApi\";\nimport HotelSearch from \"../HotelSearch\";\n\nconst HotelSearchWrapper = () => {\n  const { hotels, error, isLoaded } = useAutocompleteApi();\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return <HotelSearch hotels={hotels} />;\n  }\n};\n\nexport default HotelSearchWrapper;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport HotelSearchWrapper from \"../HotelSearchWrapper\";\n\nconst App = () => (\n  <div className={styles.container}>\n    <h1>Hotel widget generator</h1>\n    <HotelSearchWrapper />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}